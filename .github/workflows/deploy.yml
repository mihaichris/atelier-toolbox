name: Deploy
run-name: Deploy and Release Python üêç distributions

on:
  push:
    tags:
      - "v*"

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10.8'

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
    - name: "Checkout repository"
      uses: "actions/checkout@v3"

    - name: "Install python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      # install charset-normalizer version 2 because latest version breaks the executable. TODO: remove when not needed.
      run: python -m pip install -r requirements.txt && pip install charset-normalizer==2.1.1

    - name: Install PyInstaller
      run: python -m pip install pyinstaller

    - name: Build project for Windows
      run: 	pyinstaller --name toolbox --noconfirm --clean --console --copy-metadata pikepdf --copy-metadata ocrmypdf --log-level WARN .\src\toolbox\cli.py

    - uses: actions/upload-artifact@v3
      with:
        name: atelier-toolbox_v${{ github.ref_name }}_windows_amd64
        path: dist/toolbox
        retention-days: 1

  release-github:
    name: Create GitHub Release with tag ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: build-windows
    permissions:
      contents: write
    steps:
    - name: "Checkout repository"
      uses: "actions/checkout@v3"

    - name: Download built Windows package
      uses: actions/download-artifact@v3
      with:
        name: atelier-toolbox_v${{ github.ref_name }}_windows_amd64

    - name: "Zip windows downloaded artifact"
      run: zip -r atelier-toolbox_v${{ github.ref_name }}_windows_amd64.zip atelier-toolbox_v${{ github.ref_name }}_windows_amd64

    - name: "Create Checksum SHA256 file"
      run: sha256sum atelier-toolbox_v${{ github.ref_name }}_windows_amd64.zip > atelier-toolbox_v${{ github.ref_name }}_checksums.sha256

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1.11.2
      artifacts: "atelier-toolbox_v${{ github.ref_name }}_windows_amd64.zip,atelier-toolbox_v${{ github.ref_name }}_checksums.sha256"

  publish-pypi:
    name: Build and publish Python üêç distributions üì¶ to PyPI
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout repository"
      uses: "actions/checkout@v3"

    - name: "Install python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: "Install poetry"
      uses: snok/install-poetry@v1.3.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    - name: "Install dependencies (Linux)"
      run: |
        sudo apt-get update 
        sudo apt-get install tesseract-ocr ghostscript -y
    
    - name: "Build project into wheel"
      run: poetry build

    - name: Publish distribution üì¶ to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
